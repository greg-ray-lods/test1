{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "name": {
            "type": "String"
        },
        "location": {
            "type": "String"
        },
        "resourceGroupName": {
            "type": "string"
        },
        "resourceGroupId": {
            "type": "string"
        },
        "sku": {
            "type": "String"
        },
        "tagValues": {
            "type": "string",
            "defaultValue": "{}"
        },
        "storageResourceName": {
            "type": "String"
        },
        "storageResourceGroupName": {
            "type": "String"
        },
        "enableStorageOption": {
            "type": "String"
        },
        "virtualNetworkType": {
            "type": "string"
        },
        "vnet": {
            "type": "object"
        },
        "ipRules": {
            "type": "array"
        },
        "privateEndpoints": {
            "type": "array"
        },
        "privateDnsZone": {
            "type": "string"
        }
    },
    "variables": {
        "defaultVNetName": "maCSDefaultVNet9901",
        "defaultSubnetName": "maCSDefaultSubnet9901",
        "defaultAddressPrefix": "13.41.6.0/26",
        "Contributor": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "vnetPropertiesByos": {
            "customSubDomainName": "[toLower(parameters('name'))]",
            "publicNetworkAccess": "[if(equals(parameters('virtualNetworkType'), 'Internal'), 'Disabled', 'Enabled')]",
            "networkAcls": {
                "defaultAction": "[if(equals(parameters('virtualNetworkType'), 'External'), 'Deny', 'Allow')]",
                "virtualNetworkRules": "[if(equals(parameters('virtualNetworkType'), 'External'), json(concat('[{\"id\": \"', concat(subscription().id, '/resourceGroups/', parameters('vnet').resourceGroup, '/providers/Microsoft.Network/virtualNetworks/', parameters('vnet').name, '/subnets/', parameters('vnet').subnets.subnet.name), '\"}]')), json('[]'))]",
                "ipRules": "[if(or(empty(parameters('ipRules')), empty(parameters('ipRules')[0].value)), json('[]'), parameters('ipRules'))]"
            },
            "userOwnedStorage": "[if(not(empty(parameters('storageResourceName'))), createArray(json(concat('{\"resourceId\": \"',concat(subscription().id,'/resourcegroups/', json(parameters('storageResourceGroupName')).group, '/providers/Microsoft.DBforPostgreSQL/servers/', json(parameters('storageResourceName')).name, '\"}')))), json('[]'))]"
        },
        "vnetPropertiesWithCustomDomainByos": {
            "customSubDomainName": "[toLower(parameters('name'))]",
            "publicNetworkAccess": "[if(equals(parameters('virtualNetworkType'), 'Internal'), 'Disabled', 'Enabled')]",
            "networkAcls": {
                "defaultAction": "[if(equals(parameters('virtualNetworkType'), 'External'), 'Deny', 'Allow')]",
                "virtualNetworkRules": "[if(equals(parameters('virtualNetworkType'), 'External'), json(concat('[{\"id\": \"', concat(subscription().id, '/resourceGroups/', parameters('vnet').resourceGroup, '/providers/Microsoft.Network/virtualNetworks/', parameters('vnet').name, '/subnets/', parameters('vnet').subnets.subnet.name), '\"}]')), json('[]'))]",
                "ipRules": "[if(or(empty(parameters('ipRules')), empty(parameters('ipRules')[0].value)), json('[]'), parameters('ipRules'))]"
            },
            "userOwnedStorage": "[if(not(empty(parameters('storageResourceName'))), createArray(json(concat('{\"resourceId\": \"',concat(subscription().id,'/resourcegroups/', json(parameters('storageResourceGroupName')).group, '/providers/Microsoft.DBforPostgreSQL/servers/', json(parameters('storageResourceName')).name, '\"}')))), json('[]'))]"
        },
        "vnetProperties": {
            "customSubDomainName": "[toLower(parameters('name'))]",
            "publicNetworkAccess": "[if(equals(parameters('virtualNetworkType'), 'Internal'), 'Disabled', 'Enabled')]",
            "networkAcls": {
                "defaultAction": "[if(equals(parameters('virtualNetworkType'), 'External'), 'Deny', 'Allow')]",
                "virtualNetworkRules": "[if(equals(parameters('virtualNetworkType'), 'External'), json(concat('[{\"id\": \"', concat(subscription().id, '/resourceGroups/', parameters('vnet').resourceGroup, '/providers/Microsoft.Network/virtualNetworks/', parameters('vnet').name, '/subnets/', parameters('vnet').subnets.subnet.name), '\"}]')), json('[]'))]",
                "ipRules": "[if(or(empty(parameters('ipRules')), empty(parameters('ipRules')[0].value)), json('[]'), parameters('ipRules'))]"
            }
        },
        "vnetPropertiesWithCustomDomain": {
            "customSubDomainName": "[toLower(parameters('name'))]",
            "publicNetworkAccess": "[if(equals(parameters('virtualNetworkType'), 'Internal'), 'Disabled', 'Enabled')]",
            "networkAcls": {
                "defaultAction": "[if(equals(parameters('virtualNetworkType'), 'External'), 'Deny', 'Allow')]",
                "virtualNetworkRules": "[if(equals(parameters('virtualNetworkType'), 'External'), json(concat('[{\"id\": \"', concat(subscription().id, '/resourceGroups/', parameters('vnet').resourceGroup, '/providers/Microsoft.Network/virtualNetworks/', parameters('vnet').name, '/subnets/', parameters('vnet').subnets.subnet.name), '\"}]')), json('[]'))]",
                "ipRules": "[if(or(empty(parameters('ipRules')), empty(parameters('ipRules')[0].value)), json('[]'), parameters('ipRules'))]"
            }
        }
    },
    "resources": [
        {
            "type": "Microsoft.CognitiveServices/accounts",
            "apiVersion": "2022-03-01",
            "name": "[parameters('name')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "[parameters('sku')]"
            },
            "kind": "MetricsAdvisor",
            "identity": {
                "type": "systemAssigned"
            },
            "tags": "[if(contains(parameters('tagValues'), 'Microsoft.CognitiveServices/accounts'), parameters('tagValues')['Microsoft.CognitiveServices/accounts'], json('{}'))]",
            "properties": "[if(equals(parameters('virtualNetworkType'), 'External'), if(equals(parameters('enableStorageOption'), 'enable'), variables('vnetPropertiesWithCustomDomainByos'), variables('vnetPropertiesWithCustomDomain')), if(equals(parameters('enableStorageOption'), 'enable'), variables('vnetPropertiesByos'), variables('vnetProperties')))]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', 'deployVnet')]"
            ]
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "name": "deployVnet",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "variables": {},
                    "resources": [
                        {
                            "type": "Microsoft.Network/virtualNetworks",
                            "apiVersion": "2020-04-01",
                            "name": "[if(equals(parameters('virtualNetworkType'), 'External'), parameters('vnet').name, variables('defaultVNetName'))]",
                            "location": "[parameters('location')]",
                            "properties": {
                                "addressSpace": {
                                    "addressPrefixes": "[if(equals(parameters('virtualNetworkType'), 'External'), parameters('vnet').addressPrefixes, json(concat('[{\"', variables('defaultAddressPrefix'),'\"}]')))]"
                                },
                                "subnets": [
                                    {
                                        "name": "[if(equals(parameters('virtualNetworkType'), 'External'), parameters('vnet').subnets.subnet.name, variables('defaultSubnetName'))]",
                                        "properties": {
                                            "serviceEndpoints": [
                                                {
                                                    "service": "Microsoft.CognitiveServices",
                                                    "locations": [
                                                        "[parameters('location')]"
                                                    ]
                                                }
                                            ],
                                            "addressPrefix": "[if(equals(parameters('virtualNetworkType'), 'External'), parameters('vnet').subnets.subnet.addressPrefix, variables('defaultAddressPrefix'))]"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                },
                "parameters": {}
            },
            "condition": "[and(and(not(empty(parameters('vnet'))), equals(parameters('vnet').newOrExisting, 'new')), equals(parameters('virtualNetworkType'), 'External'))]"
        },
        {
            "apiVersion": "2017-05-10",
            "name": "[concat('deployPrivateEndpoint-', parameters('privateEndpoints')[copyIndex()].privateEndpoint.name)]",
            "type": "Microsoft.Resources/deployments",
            "resourceGroup": "[parameters('privateEndpoints')[copyIndex()].resourceGroup.value.name]",
            "subscriptionId": "[parameters('privateEndpoints')[copyIndex()].subscription.subscriptionId]",
            "dependsOn": [
                "[parameters('name')]"
            ],
            "condition": "[equals(parameters('virtualNetworkType'), 'Internal')]",
            "copy": {
                "name": "privateendpointscopy",
                "count": "[length(parameters('privateEndpoints'))]"
            },
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                        {
                            "location": "[parameters('location')]",
                            "name": "[parameters('privateEndpoints')[copyIndex()].privateEndpoint.name]",
                            "type": "Microsoft.Network/privateEndpoints",
                            "apiVersion": "2020-03-01",
                            "properties": {
                                "subnet": {
                                    "id": "[parameters('privateEndpoints')[copyIndex()].privateEndpoint.properties.subnet.id]"
                                },
                                "privateLinkServiceConnections": [
                                    {
                                        "name": "[parameters('privateEndpoints')[copyIndex()].privateEndpoint.name]",
                                        "properties": {
                                            "privateLinkServiceId": "[concat(parameters('resourceGroupId'), '/providers/Microsoft.CognitiveServices/accounts/', parameters('name'))]",
                                            "groupIds": "[parameters('privateEndpoints')[copyIndex()].privateEndpoint.properties.privateLinkServiceConnections[0].properties.groupIds]"
                                        }
                                    }
                                ]
                            },
                            "tags": {}
                        }
                    ]
                }
            }
        },
        {
            "apiVersion": "2017-05-10",
            "name": "[concat('deployDnsZoneGroup-', parameters('privateEndpoints')[copyIndex()].privateEndpoint.name)]",
            "type": "Microsoft.Resources/deployments",
            "resourceGroup": "[parameters('privateEndpoints')[copyIndex()].resourceGroup.value.name]",
            "subscriptionId": "[parameters('privateEndpoints')[copyIndex()].subscription.subscriptionId]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', concat('deployPrivateEndpoint-', parameters('privateEndpoints')[copyIndex()].privateEndpoint.name))]"
            ],
            "condition": "[equals(parameters('virtualNetworkType'), 'Internal')]",
            "copy": {
                "name": "privateendpointdnscopy",
                "count": "[length(parameters('privateEndpoints'))]"
            },
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                        {
                            "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                            "apiVersion": "2020-03-01",
                            "name": "[concat(parameters('privateEndpoints')[copyIndex()].privateEndpoint.name, '/', 'default')]",
                            "location": "[parameters('location')]",
                            "properties": {
                                "privateDnsZoneConfigs": [
                                    {
                                        "name": "privatelink-cognitiveservices",
                                        "properties": {
                                            "privateDnsZoneId": "[concat(parameters('resourceGroupId'), '/providers/Microsoft.Network/privateDnsZones/', parameters('privateDnsZone'))]"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        }
    ]
}
